/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/vaults/{vault_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    vaultId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DocumentVersionWithoutContent"][];
                    };
                };
            };
        };
        put?: never;
        post: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    vaultId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["CreateDocumentVersion"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DocumentVersionWithoutContent"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/vaults/{vault_id}/documents/{document_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    documentId: string;
                    vaultId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DocumentVersion"];
                    };
                };
            };
        };
        put: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    documentId: string;
                    vaultId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["UpdateDocumentVersion"];
                };
            };
            responses: {
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["DocumentVersionWithoutContent"];
                    };
                };
            };
        };
        post?: never;
        delete: {
            parameters: {
                query?: never;
                header: {
                    authorization: string;
                };
                path: {
                    documentId: string;
                    vaultId: string;
                };
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["DeleteDocumentVersion"];
                };
            };
            responses: {
                /** @description no content */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ws": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description websocket upgrade */
                101: {
                    headers: {
                        connection?: "upgrade";
                        upgrade?: "websocket";
                        "sec-websocket-key"?: string;
                        "sec-websocket-protocol"?: string;
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        CreateDocumentVersion: {
            contentBase64: string;
            /** Format: date-time */
            createdDate: string;
            isBinary: boolean;
            relativePath: string;
        };
        DeleteDocumentVersion: {
            /** Format: date-time */
            createdDate: string;
        };
        DocumentVersion: {
            contentBase64: string;
            /** Format: date-time */
            createdDate: string;
            /** Format: uuid */
            documentId: string;
            isBinary: boolean;
            isDeleted: boolean;
            relativePath: string;
            /** Format: date-time */
            updatedDate: string;
            vaultId: string;
            /** Format: int64 */
            versionId: number;
        };
        DocumentVersionWithoutContent: {
            /** Format: date-time */
            createdDate: string;
            /** Format: uuid */
            documentId: string;
            isBinary: boolean;
            isDeleted: boolean;
            relativePath: string;
            /** Format: date-time */
            updatedDate: string;
            vaultId: string;
            /** Format: int64 */
            versionId: number;
        };
        PathParams: {
            vaultId: string;
        };
        PathParams2: {
            vaultId: string;
        };
        PathParams3: {
            /** Format: uuid */
            documentId: string;
            vaultId: string;
        };
        PathParams4: {
            /** Format: uuid */
            documentId: string;
            vaultId: string;
        };
        PathParams5: {
            /** Format: uuid */
            documentId: string;
            vaultId: string;
        };
        UpdateDocumentVersion: {
            contentBase64: string;
            /** Format: date-time */
            createdDate: string;
            isBinary: boolean;
            /** Format: int64 */
            parentVersionId: number;
            relativePath: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
