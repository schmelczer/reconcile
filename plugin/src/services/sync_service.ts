import * as lib from "../../../backend/sync_lib/pkg/sync_lib.js";

import createClient, { Client } from "openapi-fetch";
import type { components, paths } from "./types"; // generated by openapi-typescript
import { Logger } from "src/logger";
import { Database } from "src/database/database";
import { SyncSettings } from "src/database/sync-settings";
import {
	VaultUpdateId,
	RelativePath,
	DocumentId,
} from "src/database/document-metadata.js";

export class SyncServer {
	private static VAULT_ID = "default";
	private client: Client<paths>;

	public constructor(private database: Database) {
		this.createClient(database.getSettings());
		database.addOnSettingsChangeHandlers((s) => this.createClient(s));
	}

	private createClient(settings: SyncSettings) {
		this.client = createClient<paths>({
			baseUrl: settings.remoteUri,
		});
	}

	public async ping(): Promise<components["schemas"]["PingResponse"]> {
		const response = await this.client.GET("/ping", {
			params: {
				header: {
					authorization:
						"Bearer " + this.database.getSettings().token,
				},
			},
		});

		Logger.getInstance().info(
			"Ping response: " + JSON.stringify(response.data)
		);

		if (!response.data) {
			throw new Error(`Failed to ping server: ${response.error}`);
		}

		return response.data;
	}

	public async create({
		relativePath,
		contentBytes,
		createdDate,
	}: {
		relativePath: RelativePath;
		contentBytes: Uint8Array;
		createdDate: Date;
	}): Promise<components["schemas"]["DocumentVersion"]> {
		let response = await this.client.POST("/vaults/{vault_id}/documents", {
			params: {
				path: {
					vault_id: SyncServer.VAULT_ID,
				},
				header: {
					authorization:
						"Bearer " + this.database.getSettings().token,
				},
			},
			body: {
				contentBase64: lib.bytes_to_base64(contentBytes),
				createdDate: createdDate.toISOString(),
				relativePath,
			},
		});

		if (!response.data) {
			throw new Error(`Failed to create document: ${response.error}`);
		}

		Logger.getInstance().info(
			"Created document " + JSON.stringify(response.data)
		);

		return response.data;
	}

	public async put({
		parentVersionId,
		documentId,
		relativePath,
		contentBytes,
		createdDate,
	}: {
		parentVersionId: VaultUpdateId;
		documentId: DocumentId;
		relativePath: RelativePath;
		contentBytes: Uint8Array;
		createdDate: Date;
	}): Promise<components["schemas"]["DocumentVersion"]> {
		let response = await this.client.PUT(
			"/vaults/{vault_id}/documents/{document_id}",
			{
				params: {
					path: {
						vault_id: SyncServer.VAULT_ID,
						document_id: documentId,
					},
					header: {
						authorization:
							"Bearer " + this.database.getSettings().token,
					},
				},
				body: {
					parentVersionId,
					contentBase64: lib.bytes_to_base64(contentBytes),
					createdDate: createdDate.toISOString(),
					relativePath,
				},
			}
		);

		if (!response.data) {
			throw new Error(`Failed to update document: ${response.error}`);
		}

		Logger.getInstance().info(
			"Updated document " + JSON.stringify(response.data)
		);

		return response.data;
	}

	public async delete({
		documentId,
		relativePath,
		createdDate,
	}: {
		documentId: DocumentId;
		relativePath: RelativePath;
		createdDate: Date;
	}): Promise<void> {
		const response = await this.client.DELETE(
			"/vaults/{vault_id}/documents/{document_id}",
			{
				params: {
					path: {
						vault_id: SyncServer.VAULT_ID,
						document_id: documentId,
					},
					header: {
						authorization:
							"Bearer " + this.database.getSettings().token,
					},
				},
				body: {
					createdDate: createdDate.toISOString(),
					relativePath,
				},
			}
		);

		if (response.error) {
			throw new Error(`Failed to delete document`);
		}

		Logger.getInstance().info(
			"Updated document " + JSON.stringify(response.data)
		);

		return response.data;
	}

	public async get({
		documentId,
	}: {
		documentId: DocumentId;
	}): Promise<components["schemas"]["DocumentVersion"]> {
		const response = await this.client.GET(
			"/vaults/{vault_id}/documents/{document_id}",
			{
				params: {
					path: {
						vault_id: SyncServer.VAULT_ID,
						document_id: documentId,
					},
					header: {
						authorization:
							"Bearer " + this.database.getSettings().token,
					},
				},
			}
		);

		if (!response.data) {
			throw new Error(`Failed to get document: ${response.error}`);
		}

		Logger.getInstance().info(
			"Get document " + JSON.stringify(response.data)
		);

		return response.data;
	}

	public async getAll(
		since?: VaultUpdateId
	): Promise<components["schemas"]["FetchLatestDocumentsResponse"]> {
		const response = await this.client.GET("/vaults/{vault_id}/documents", {
			params: {
				path: {
					vault_id: SyncServer.VAULT_ID,
				},
				header: {
					authorization:
						"Bearer " + this.database.getSettings().token,
				},
				query: {
					since_update_id: since,
				},
			},
		});

		if (!response.data) {
			throw new Error(`Failed to get documents: ${response.error}`);
		}

		Logger.getInstance().info(
			"Get document " + JSON.stringify(response.data)
		);

		return response.data;
	}
}
